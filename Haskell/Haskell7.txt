1) Finish the following list comprehension using a let binding:
 fromOrigin :: (RealFloat a) => (a, a) -> [a]
 fromOrigin points = [ distance | ??????? ]
The function should take a list of tuples and generate the distance from the origin the tuple is and store
those in a list.
	fromOrigin :: (RealFloat a) => [(a, a)] -> [a]
	fromOrigin points = [ distance | (x, y) <- points, let distance = sqrt ((x - 0)^2 + (y - 0)^2) ]

2) Finish the following list comprehension using a let binding:
 closeEnough :: (RealFloat a) => (a, a) -> a -> [((a, a), a)]
 closeEnough points d = ???
The function should take a list of tuples, calculate the distance they are from the origin, and keep only
the tuples whose distance are less than d. The final result should be a tuple, with the first part of the
tuple being the point itself and the second part of the tuple being the distance calculated.
	closeEnough :: (RealFloat a) => [(a, a)] -> a -> [((a, a), a)]
	closeEnough points d = [ ((x,y), distance) | (x, y) <- points, let distance = sqrt ((x - 0)^2 + (y - 0)^2), distance < d]

3) Use a case expression to write a function which given a string returns "(a/an) ___". We will pretend
every word starting with a "aeiou" are 'an' words.
 Ex: article apple -> "an apple"
 article pear -> "a pear"
	article :: [Char] -> [Char]
	article word = case head word `elem` "aeiou" of True  -> "an " ++ word
                                                    False -> "a " ++ word

4) Use a case expression to write a function which given an integer and a string returns "You have (a/#)
___(no s or s)". We will pretend adding an s works for pluralazing all words.
 Ex: haveNum 1 watermelon -> "You have a watermelon."
 haveNum 2 apple -> "You have 2 apples."
 	haveNum :: Int -> [Char] -> [Char]
	haveNum x word = case x > 1 || x < 0 of True -> "You have " ++ show x ++ ' ':word ++ ['s']
                                        	False -> "You have a " ++ word

5) Use a case expression to write a function which given a letter grade writes "You earned a __ GPA."
 A/a = 4.0, B/b = 3.0, C/c = 2.0, D/d = 1.0, F/f = 0.0
	gpa :: Char -> String
	gpa x = case toUpper x of 'A' -> "You earned a 4.0 GPA."
                          	  'B' -> "You earned a 3.0 GPA."
                          	  'C' -> "You earned a 2.0 GPA."
                          	  'D' -> "You earned a 1.0 GPA."
                          	  'F' -> "You earned a 0.0 GPA." 
 
6) Write a recursive function which calculates the factorial of any number.
	factorial :: Integral a => a -> a
	factorial 1 = 1
	factorial x = x * factorial (x - 1)

7) Write a recursive function which calculates a^n.
	pow :: Integral a => a -> a -> a
	pow x 1 = x
	pow x y = x * pow x (y - 1)

8) Write a recursive function that calculates any value in the Fibonacci sequence (0->0, 1->1, 2->1, 3->2,
4->3, ...)
	fib :: Integral a => a -> a
	fib 0 = 0
	fib 1 = 1
	fib 2 = 1
	fib x = fib (x - 2) + fib (x - 1)

9) Write a recursive function that given a list builds the list backwards.
	reverse' :: [a] -> [a]
	reverse' [] = []
	reverse' (x:xs) = reverse' xs ++ [x]

