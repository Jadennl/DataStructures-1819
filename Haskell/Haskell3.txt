Haskell3

1) Give an example where div and quot return different answers.  Which is equivalent to Java's integer division?
	div (-2) 4 -> -1
	quot (-2) 4 -> 0
	java division is div

2) Give an example where rem and mod return different answers.  Which is equivalent to Java's modulus?
	  rem (-3) 4 -> -3 
	  mod (-3) 4 -> 1
	  mod is rem

3) Explain divMod and quotRem and give example calculations.
	divMod gives a tuple of the div and mod functions.
		divMod (-3) 4
		=> (-1,1)
	quotRem gives a tuple of the quot and rem functions.
		divMod (-3) 4
		=> (-1,1)

4) What does the ^ do when repeated? 
Try: 
	3^2 -> 9 
	3^2^1 -> 9
	3^2^2 -> 81
	3^2^3 -> 6561
	3^2^4 -> 43046721
	3^2^5 - > 1853020188851841
	n^x^y does n^(x^y)


5) Research time: What main class type can use max and min? What other methods are available for this data type? What main class type can use ==? What is the opposite of ==? Give an example of using subtract, even, odd, gcd, lcm, ^, ^^.
	An ordered type (ord). Compare, <, <=, >, >=, max and min.
	== uses Eq. /= is the opposite. 
	subtract 4 2 -> -2
	even 5 -> False
	odd 4 -> True
	gcd 12 64 -> 4
	lcm 12 64 -> 192
	3 ^ 2 -> 9
	3 ^^ 2 -> 9.0


6) Generate the first 20 results of the algebraic results for x^3 -3x^2 + 3
	map (\ x -> x^3 - 3 * x^2 + 3) [0..19]
	[3,1,-1,3,19,53,111,199,323,489,703,971,1299,1693,2159,2703,3331,4049,4863,5779]


7) Grab the first 10 numbers beyond 500 which are perfectly divisible by 42.
	take 10 [x | x <- [500..], x `mod` 42 == 0]
	[504,546,588,630,672,714,756,798,840,882]


8) Write a function which given three numbers, a, b, and c, calculates all numbers from a to b which are multiples of c.  However, if b is less than a, do the same thing but calculate all numbers from b to a which are multiples of c.
	weird a b c 
    	| b < a = [x | x <- [b..a], c `mod` x == 0]
    	| otherwise = [x | x <- [a..b], c `mod` x == 0]

9) Write a function which accepts a list, x and a number, x, and returns a list of values in x which have no common divisors with x aside from the number 1.

10) Write a function to be used at a high rise hotel, where the owner wants all floor numbers from 0 to whatever they decide as the top most floor, except they do not want floor 13 to exist (unlucky).
	highrise x = [y | y <- [0..x], y /= 13]

11) Calculate the sum of all results from the expression 27x^2 -12x -20 starting at x = 0 and ending at x = 1000.
	product ( map (\ x -> 27 * x ^ 2 - 12 * x - 20 ) [0..1000] )
	
 

12) Write a function which calculates the number of divisors any given value has.  For instance, the number of divisors in 12 = 1,2,3,4,6,12 = 6 total numbers.  The number of divisors in 3 = 1,3 = 2 total numbers.
	numDiv x = length  [y | y <- [1..x], x `mod` y == 0]

13) Write a function that given a sentence, replaces all spaces ' ' with underscores '_'.
	unScore sent = [if c == ' ' then '_' else c | c <- sent]


14) Write a function which, given a sentence and a phrase, inserts the phrase after each character in the sentence.  For instance: "That hurt" and "Ouch!" -> "TOuch!hOuch!aOuch!tOuch! Ouch!hOuch!uOuch!rOuch!tOuch!"  
	insChar word phrase = concat [c:phrase | c <- word]

15) Write a function which generates every matrix combination in a 9x9 matrix. ->  "(0,0)", "(0,1)", "(0,2)", ... "(1,0)", "(1,1)"... "(9,9)".  Hint: show will convert an int to a String, so show 5 -> "5"
	matrix99 = zip [0..9] [0..9]

16) Modify the adjective/noun example to accept a list of adjectives, nouns, and build a list with every combination of adjective->noun you can but only include ones where the adjective and noun begin with the same letter.  "lazy frog" would not be included, but "lazy llama" or "cool cat" or "dirty dog" would be.
	wordCombo nouns adjs = [adj ++ " " ++ noun | adj <- adjs, noun <- nouns, head noun == head adj]

17) Write a function which given a start year and an end year generates every leap year between the two.  Leap years are all multiples of 400 or are all multiples of 4 whichare not multiples of 100.
	leapYears strt end = [ x | x <- [strt..end], (x `mod` 400) == 0 || (x `mod` 4) == 0 && not ((x `mod` 100) == 0)]
